//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SETArchitectureTestModel", "FK_Applications_ApplicationTypes", "ApplicationType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SETArchitecture.Data.Objects.ApplicationType), "Application", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SETArchitecture.Data.Objects.Application), true)]
[assembly: EdmRelationshipAttribute("SETArchitectureTestModel", "FK_Servers_ServerTypes", "ServerType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SETArchitecture.Data.Objects.ServerType), "Server", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SETArchitecture.Data.Objects.Server), true)]

#endregion

namespace SETArchitecture.Data.Objects
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SETArchitectureTestEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SETArchitectureTestEntities object using the connection string found in the 'SETArchitectureTestEntities' section of the application configuration file.
        /// </summary>
        public SETArchitectureTestEntities() : base("name=SETArchitectureTestEntities", "SETArchitectureTestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SETArchitectureTestEntities object.
        /// </summary>
        public SETArchitectureTestEntities(string connectionString) : base(connectionString, "SETArchitectureTestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SETArchitectureTestEntities object.
        /// </summary>
        public SETArchitectureTestEntities(EntityConnection connection) : base(connection, "SETArchitectureTestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Application> Applications
        {
            get
            {
                if ((_Applications == null))
                {
                    _Applications = base.CreateObjectSet<Application>("Applications");
                }
                return _Applications;
            }
        }
        private ObjectSet<Application> _Applications;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ApplicationType> ApplicationTypes
        {
            get
            {
                if ((_ApplicationTypes == null))
                {
                    _ApplicationTypes = base.CreateObjectSet<ApplicationType>("ApplicationTypes");
                }
                return _ApplicationTypes;
            }
        }
        private ObjectSet<ApplicationType> _ApplicationTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Server> Servers
        {
            get
            {
                if ((_Servers == null))
                {
                    _Servers = base.CreateObjectSet<Server>("Servers");
                }
                return _Servers;
            }
        }
        private ObjectSet<Server> _Servers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ServerType> ServerTypes
        {
            get
            {
                if ((_ServerTypes == null))
                {
                    _ServerTypes = base.CreateObjectSet<ServerType>("ServerTypes");
                }
                return _ServerTypes;
            }
        }
        private ObjectSet<ServerType> _ServerTypes;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Applications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToApplications(Application application)
        {
            base.AddObject("Applications", application);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ApplicationTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToApplicationTypes(ApplicationType applicationType)
        {
            base.AddObject("ApplicationTypes", applicationType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Servers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToServers(Server server)
        {
            base.AddObject("Servers", server);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ServerTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToServerTypes(ServerType serverType)
        {
            base.AddObject("ServerTypes", serverType);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SETArchitectureTestModel", Name="Application")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Application : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Application object.
        /// </summary>
        /// <param name="applicationID">Initial value of the ApplicationID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="applicationTypeID">Initial value of the ApplicationTypeID property.</param>
        public static Application CreateApplication(global::System.Int32 applicationID, global::System.String name, global::System.Int32 applicationTypeID)
        {
            Application application = new Application();
            application.ApplicationID = applicationID;
            application.Name = name;
            application.ApplicationTypeID = applicationTypeID;
            return application;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ApplicationID
        {
            get
            {
                return _ApplicationID;
            }
            set
            {
                if (_ApplicationID != value)
                {
                    OnApplicationIDChanging(value);
                    ReportPropertyChanging("ApplicationID");
                    _ApplicationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ApplicationID");
                    OnApplicationIDChanged();
                }
            }
        }
        private global::System.Int32 _ApplicationID;
        partial void OnApplicationIDChanging(global::System.Int32 value);
        partial void OnApplicationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ApplicationTypeID
        {
            get
            {
                return _ApplicationTypeID;
            }
            set
            {
                if (_ApplicationTypeID != value)
                {
                    OnApplicationTypeIDChanging(value);
                    ReportPropertyChanging("ApplicationTypeID");
                    _ApplicationTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ApplicationTypeID");
                    OnApplicationTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ApplicationTypeID;
        partial void OnApplicationTypeIDChanging(global::System.Int32 value);
        partial void OnApplicationTypeIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SETArchitectureTestModel", "FK_Applications_ApplicationTypes", "ApplicationType")]
        public ApplicationType ApplicationType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ApplicationType>("SETArchitectureTestModel.FK_Applications_ApplicationTypes", "ApplicationType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ApplicationType>("SETArchitectureTestModel.FK_Applications_ApplicationTypes", "ApplicationType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ApplicationType> ApplicationTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ApplicationType>("SETArchitectureTestModel.FK_Applications_ApplicationTypes", "ApplicationType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ApplicationType>("SETArchitectureTestModel.FK_Applications_ApplicationTypes", "ApplicationType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SETArchitectureTestModel", Name="ApplicationType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ApplicationType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ApplicationType object.
        /// </summary>
        /// <param name="applicationTypeID">Initial value of the ApplicationTypeID property.</param>
        /// <param name="typeName">Initial value of the TypeName property.</param>
        public static ApplicationType CreateApplicationType(global::System.Int32 applicationTypeID, global::System.String typeName)
        {
            ApplicationType applicationType = new ApplicationType();
            applicationType.ApplicationTypeID = applicationTypeID;
            applicationType.TypeName = typeName;
            return applicationType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ApplicationTypeID
        {
            get
            {
                return _ApplicationTypeID;
            }
            set
            {
                if (_ApplicationTypeID != value)
                {
                    OnApplicationTypeIDChanging(value);
                    ReportPropertyChanging("ApplicationTypeID");
                    _ApplicationTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ApplicationTypeID");
                    OnApplicationTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ApplicationTypeID;
        partial void OnApplicationTypeIDChanging(global::System.Int32 value);
        partial void OnApplicationTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SETArchitectureTestModel", "FK_Applications_ApplicationTypes", "Application")]
        public EntityCollection<Application> Applications
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Application>("SETArchitectureTestModel.FK_Applications_ApplicationTypes", "Application");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Application>("SETArchitectureTestModel.FK_Applications_ApplicationTypes", "Application", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SETArchitectureTestModel", Name="Server")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Server : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Server object.
        /// </summary>
        /// <param name="serverID">Initial value of the ServerID property.</param>
        /// <param name="serverName">Initial value of the ServerName property.</param>
        /// <param name="serverTypeID">Initial value of the ServerTypeID property.</param>
        public static Server CreateServer(global::System.Int32 serverID, global::System.String serverName, global::System.Int32 serverTypeID)
        {
            Server server = new Server();
            server.ServerID = serverID;
            server.ServerName = serverName;
            server.ServerTypeID = serverTypeID;
            return server;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ServerID
        {
            get
            {
                return _ServerID;
            }
            set
            {
                if (_ServerID != value)
                {
                    OnServerIDChanging(value);
                    ReportPropertyChanging("ServerID");
                    _ServerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ServerID");
                    OnServerIDChanged();
                }
            }
        }
        private global::System.Int32 _ServerID;
        partial void OnServerIDChanging(global::System.Int32 value);
        partial void OnServerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServerName
        {
            get
            {
                return _ServerName;
            }
            set
            {
                OnServerNameChanging(value);
                ReportPropertyChanging("ServerName");
                _ServerName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ServerName");
                OnServerNameChanged();
            }
        }
        private global::System.String _ServerName;
        partial void OnServerNameChanging(global::System.String value);
        partial void OnServerNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ServerTypeID
        {
            get
            {
                return _ServerTypeID;
            }
            set
            {
                if (_ServerTypeID != value)
                {
                    OnServerTypeIDChanging(value);
                    ReportPropertyChanging("ServerTypeID");
                    _ServerTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ServerTypeID");
                    OnServerTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ServerTypeID;
        partial void OnServerTypeIDChanging(global::System.Int32 value);
        partial void OnServerTypeIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SETArchitectureTestModel", "FK_Servers_ServerTypes", "ServerType")]
        public ServerType ServerType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServerType>("SETArchitectureTestModel.FK_Servers_ServerTypes", "ServerType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServerType>("SETArchitectureTestModel.FK_Servers_ServerTypes", "ServerType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServerType> ServerTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServerType>("SETArchitectureTestModel.FK_Servers_ServerTypes", "ServerType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServerType>("SETArchitectureTestModel.FK_Servers_ServerTypes", "ServerType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SETArchitectureTestModel", Name="ServerType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServerType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ServerType object.
        /// </summary>
        /// <param name="serverTypeID">Initial value of the ServerTypeID property.</param>
        /// <param name="typeName">Initial value of the TypeName property.</param>
        public static ServerType CreateServerType(global::System.Int32 serverTypeID, global::System.String typeName)
        {
            ServerType serverType = new ServerType();
            serverType.ServerTypeID = serverTypeID;
            serverType.TypeName = typeName;
            return serverType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ServerTypeID
        {
            get
            {
                return _ServerTypeID;
            }
            set
            {
                if (_ServerTypeID != value)
                {
                    OnServerTypeIDChanging(value);
                    ReportPropertyChanging("ServerTypeID");
                    _ServerTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ServerTypeID");
                    OnServerTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ServerTypeID;
        partial void OnServerTypeIDChanging(global::System.Int32 value);
        partial void OnServerTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SETArchitectureTestModel", "FK_Servers_ServerTypes", "Server")]
        public EntityCollection<Server> Servers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Server>("SETArchitectureTestModel.FK_Servers_ServerTypes", "Server");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Server>("SETArchitectureTestModel.FK_Servers_ServerTypes", "Server", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
